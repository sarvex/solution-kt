internal class Solution {
  private var p: IntArray
  fun minMalwareSpread(graph: Array<IntArray>, initial: IntArray): Int {
    val n = graph.size
    p = IntArray(n)
    for (i in 0 until n) {
      p[i] = i
    }
    val size = IntArray(n)
    Arrays.fill(size, 1)
    for (i in 0 until n) {
      for (j in i + 1 until n) {
        if (graph[i][j] == 1) {
          val pa = find(i)
          val pb = find(j)
          if (pa == pb) {
            continue
          }
          p[pa] = pb
          size[pb] += size[pa]
        }
      }
    }
    var mi = Int.MAX_VALUE
    var res = initial[0]
    Arrays.sort(initial)
    for (i in initial.indices) {
      var t = 0
      val s: Set<Int> = HashSet()
      for (j in initial.indices) {
        if (i == j) {
          continue
        }
        if (s.contains(find(initial[j]))) {
          continue
        }
        s.add(find(initial[j]))
        t += size[find(initial[j])]
      }
      if (mi > t) {
        mi = t
        res = initial[i]
      }
    }
    return res
  }

  private fun find(x: Int): Int {
    if (p[x] != x) {
      p[x] = find(p[x])
    }
    return p[x]
  }
}
